(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d222366"],{ce3a:function(e,t,n){"use strict";n.r(t);var d=n("7a23");const a=Object(d["createElementVNode"])("p",{class:"tip"},[Object(d["createTextVNode"])(" 具体兼容请查看 "),Object(d["createElementVNode"])("a",{class:"link",href:"https://github.com/x-extends/vxe-table-plugin-antd",target:"_blank"},"vxe-table-plugin-antd"),Object(d["createTextVNode"])(" 插件的 API"),Object(d["createElementVNode"])("br"),Object(d["createElementVNode"])("span",{class:"red"},"（注：该示例仅供参考，具体逻辑请自行实现）")],-1),r={class:"demo-code"};function o(e,t,n,o,i,l){const s=Object(d["resolveComponent"])("a-alert"),c=Object(d["resolveComponent"])("el-button"),p=Object(d["resolveComponent"])("vxe-grid"),u=Object(d["resolveComponent"])("pre-code");return Object(d["openBlock"])(),Object(d["createElementBlock"])("div",null,[a,Object(d["createVNode"])(p,Object(d["mergeProps"])({ref:"xGrid"},e.gridOptions,Object(d["toHandlers"])(e.gridEvents)),{top:Object(d["withCtx"])(()=>[Object(d["createVNode"])(s,{type:"warning",message:`已选择 ${e.demo1.selectRecords.length} 项`,banner:""},null,8,["message"])]),toolbar_buttons:Object(d["withCtx"])(()=>[Object(d["createVNode"])(c,{onClick:e.insertEvent},{default:Object(d["withCtx"])(()=>[Object(d["createTextVNode"])("新增")]),_:1},8,["onClick"]),Object(d["createVNode"])(c,{onClick:e.saveEvent},{default:Object(d["withCtx"])(()=>[Object(d["createTextVNode"])("保存")]),_:1},8,["onClick"])]),_:1},16),Object(d["createElementVNode"])("p",r,Object(d["toDisplayString"])(e.$t("app.body.button.showCode")),1),Object(d["createElementVNode"])("pre",null,[Object(d["createTextVNode"])("      "),Object(d["createVNode"])(u,{class:"xml"},{default:Object(d["withCtx"])(()=>[Object(d["createTextVNode"])(Object(d["toDisplayString"])(e.demoCodes[0]),1)]),_:1}),Object(d["createTextVNode"])("\n      "),Object(d["createVNode"])(u,{class:"typescript"},{default:Object(d["withCtx"])(()=>[Object(d["createTextVNode"])(Object(d["toDisplayString"])(e.demoCodes[1]),1)]),_:1}),Object(d["createTextVNode"])("\n    ")])])}var i=n("ed3b"),l=Object(d["defineComponent"])({setup(){const e=Object(d["ref"])({}),t=[{value:"Designer"},{value:"Develop"},{value:"Test"},{value:"PM"}],n=Object(d["reactive"])({selectRecords:[]}),a=Object(d["reactive"])({border:!0,showOverflow:!0,keepSource:!0,height:460,loading:!1,data:[],toolbarConfig:{slots:{buttons:"toolbar_buttons"}},editConfig:{trigger:"click",mode:"row"},columns:[{type:"checkbox",width:60},{type:"seq",title:"Number",width:80},{field:"name",title:"AInput",minWidth:140,editRender:{name:"AInput"}},{field:"role",title:"AAutoComplete",width:160,editRender:{name:"AAutoComplete",props:{options:[]},events:{search(e,n){const d=t.filter(e=>-1!==e.value.toUpperCase().indexOf((n||"").toUpperCase()));if(a.columns){const e=a.columns[3];e.editRender&&e.editRender.props&&(e.editRender.props.options=d)}}}}},{field:"age",title:"AInputNumber",width:160,editRender:{name:"AInputNumber",props:{max:99,min:18}}},{field:"sex",title:"ASelect",width:140,editRender:{name:"ASelect",options:[]}},{field:"sex1",title:"ASelect（不建议放在单元格）",width:260,editRender:{name:"ASelect",options:[],props:{mode:"multiple"}}},{field:"sex2",title:"ASelect",width:140,editRender:{name:"ASelect",optionGroups:[]}},{field:"region",title:"ACascader",width:200,editRender:{name:"ACascader",props:{options:[]}}},{field:"date1",title:"ADatePicker",width:140,editRender:{name:"ADatePicker",props:{type:"date",format:"YYYY/MM/DD"}}},{field:"date2",title:"AMonthPicker",width:140,editRender:{name:"AMonthPicker"}},{field:"date3",title:"AWeekPicker",width:140,editRender:{name:"AWeekPicker"}},{field:"date4",title:"ARangePicker",width:260,editRender:{name:"ARangePicker"}},{field:"date5",title:"ATimePicker",width:140,editRender:{name:"ATimePicker"}},{field:"tree1",title:"ATreeSelect",width:140,editRender:{name:"ATreeSelect",props:{treeData:[]}}},{field:"tree2",title:"ATreeSelect（不建议放在单元格）",width:300,editRender:{name:"ATreeSelect",props:{treeData:[],treeCheckable:!0}}},{field:"flag",title:"ASwitch",width:100,cellRender:{name:"ASwitch"}},{field:"rate",title:"ARate",width:200,cellRender:{name:"ARate"}}]}),r={checkboxAll(){const t=e.value;n.selectRecords=t.getCheckboxRecords()},checkboxChange(){const t=e.value;n.selectRecords=t.getCheckboxRecords()}},o=()=>{const e=[{label:"男",value:"1"},{label:"女",value:"0"}];if(a.columns){const t=a.columns[5];t.editRender&&(t.editRender.options=e);const n=a.columns[6];n.editRender&&(n.editRender.options=e)}},l=()=>{const e=[{label:"北京",value:1,children:[{value:3,label:"东城区"},{value:4,label:"西城区"}]},{label:"上海",value:21,children:[{value:23,label:"黄浦区"},{value:24,label:"卢湾区"}]},{label:"广东",value:42,children:[{value:43,label:"广州市"},{value:67,label:"深圳市"}]}];if(a.columns){const t=a.columns[8];t.editRender&&t.editRender.props&&(t.editRender.props.options=e)}},s=()=>{const e=[{label:"分组1",options:[{label:"男",value:"1"}]},{label:"分组2",options:[{label:"女",value:"0"}]}];if(a.columns){const t=a.columns[7];t.editRender&&(t.editRender.optionGroups=e)}},c=()=>{const e=[{title:"Node1",value:"0-0",key:"0-0",children:[{title:"Child Node1",value:"0-0-0",key:"0-0-0"}]},{title:"Node2",value:"0-1",key:"0-1",children:[{title:"Child Node3",value:"0-1-0",key:"0-1-0",disabled:!0},{title:"Child Node4",value:"0-1-1",key:"0-1-1"},{title:"Child Node5",value:"0-1-2",key:"0-1-2"}]}];if(a.columns){const t=a.columns[14];t.editRender&&t.editRender.props&&(t.editRender.props.treeData=e);const n=a.columns[15];n.editRender&&n.editRender.props&&(n.editRender.props.treeData=e)}},p=async()=>{const t=e.value,n={role:"",age:18,sex1:[],region:[],flag:!1,rate:2},{row:d}=await t.insert(n);t.setEditRow(d)},u=()=>{const t=e.value,{insertRecords:n,removeRecords:d,updateRecords:a}=t.getRecordset();n.length||d.length||a.length?i["a"].success({content:`insertRecords=${n.length}; removeRecords=${d.length}; updateRecords=${a.length}`}):i["a"].warn({content:"数据未改动！"})};return o(),l(),s(),c(),a.loading=!0,setTimeout(()=>{a.data=[{id:10001,name:"Test1",nickname:"T1",role:"Develop",sex:"0",sex1:[],region:[],age:28,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:5,rate1:59,flag:!1,address:"Shenzhen"},{id:10002,name:"Test2",nickname:"T2",role:"Test",sex:"1",sex1:[],region:[],age:22,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:2,rate1:22,flag:!1,address:"Guangzhou"},{id:10003,name:"Test3",nickname:"T3",role:"PM",sex:"0",sex1:[],region:[],age:32,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:3,rate1:12,flag:!1,address:"Shanghai"},{id:10004,name:"Test4",nickname:"T4",role:"Designer",sex:"0",sex1:["1","0"],region:[],age:23,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",color1:"",tree1:"",tree2:[],date7:"",rate:33,rate1:4,flag:!0,address:"Shenzhen"},{id:10005,name:"Test5",nickname:"T5",role:"Develop",sex:"0",sex1:["1","0"],region:[],age:30,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",color1:"",tree1:"",tree2:[],date7:"",rate:0,rate1:15,flag:!0,address:"Shanghai"},{id:10006,name:"Test6",nickname:"T6",role:"Designer",sex:"0",sex1:[],region:[],age:21,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:3,rate1:73,flag:!1,address:"Shenzhen"},{id:10007,name:"Test7",nickname:"T7",role:"Test",sex:"1",sex1:["1"],region:[],age:29,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:0,rate1:0,flag:!0,address:"Guangzhou"},{id:10008,name:"Test8",nickname:"T8",role:"Develop",sex:"1",sex1:[],region:[],age:35,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:2,rate1:14,flag:!1,address:"Shenzhen"},{id:10009,name:"Test9",nickname:"T9",role:"Test",sex:"1",sex1:["0"],region:[],age:24,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:3,rate1:52,flag:!1,address:"Shenzhen"},{id:100010,name:"Test10",nickname:"T10",role:"Develop",sex:"1",sex1:[],region:[],age:20,date:"",date1:"",date2:"",date3:"",date4:[],date5:"",date7:"",color1:"",tree1:"",tree2:[],rate:4,rate1:83,flag:!1,address:"Guangzhou"}],a.loading=!1},500),{xGrid:e,demo1:n,gridOptions:a,gridEvents:r,insertEvent:p,saveEvent:u,demoCodes:['\n        <vxe-grid ref="xGrid" v-bind="gridOptions" v-on="gridEvents">\n          <template #top>\n            <a-alert type="warning" :message="`已选择 ${demo1.selectRecords.length} 项`" banner></a-alert>\n          </template>\n          <template #toolbar_buttons>\n            <el-button @click="insertEvent">新增</el-button>\n            <el-button @click="saveEvent">保存</el-button>\n          </template>\n        </vxe-grid>\n        ',"\n        import { defineComponent, reactive, ref } from 'vue'\n        import { Modal } from 'ant-design-vue'\n        import { VxeGridInstance, VxeGridProps, VxeGridListeners } from 'vxe-table'\n\n        export default defineComponent({\n          setup () {\n            const xGrid = ref({} as VxeGridInstance)\n\n            const restaurants = [\n              { value: 'Designer' },\n              { value: 'Develop' },\n              { value: 'Test' },\n              { value: 'PM' }\n            ]\n\n            const demo1 = reactive({\n              selectRecords: [] as any[]\n            })\n\n            const gridOptions = reactive({\n              border: true,\n              showOverflow: true,\n              keepSource: true,\n              height: 460,\n              loading: false,\n              data: [],\n              toolbarConfig: {\n                slots: {\n                  buttons: 'toolbar_buttons'\n                }\n              },\n              editConfig: {\n                trigger: 'click',\n                mode: 'row'\n              },\n              columns: [\n                { type: 'checkbox', width: 60 },\n                { type: 'seq', title: 'Number', width: 80 },\n                { field: 'name', title: 'AInput', minWidth: 140, editRender: { name: 'AInput' } },\n                {\n                  field: 'role',\n                  title: 'AAutoComplete',\n                  width: 160,\n                  editRender: {\n                    name: 'AAutoComplete',\n                    props: { options: [] },\n                    events: {\n                      search (params, value) {\n                        const options = restaurants.filter(option => option.value.toUpperCase().indexOf((value || '').toUpperCase()) !== -1)\n                        if (gridOptions.columns) {\n                          const column3 = gridOptions.columns[3]\n                          if (column3.editRender && column3.editRender.props) {\n                            column3.editRender.props.options = options\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                { field: 'age', title: 'AInputNumber', width: 160, editRender: { name: 'AInputNumber', props: { max: 99, min: 18 } } },\n                { field: 'sex', title: 'ASelect', width: 140, editRender: { name: 'ASelect', options: [] } },\n                { field: 'sex1', title: 'ASelect（不建议放在单元格）', width: 260, editRender: { name: 'ASelect', options: [], props: { mode: 'multiple' } } },\n                { field: 'sex2', title: 'ASelect', width: 140, editRender: { name: 'ASelect', optionGroups: [] } },\n                { field: 'region', title: 'ACascader', width: 200, editRender: { name: 'ACascader', props: { options: [] } } },\n                { field: 'date1', title: 'ADatePicker', width: 140, editRender: { name: 'ADatePicker', props: { type: 'date', format: 'YYYY/MM/DD' } } },\n                { field: 'date2', title: 'AMonthPicker', width: 140, editRender: { name: 'AMonthPicker' } },\n                { field: 'date3', title: 'AWeekPicker', width: 140, editRender: { name: 'AWeekPicker' } },\n                { field: 'date4', title: 'ARangePicker', width: 260, editRender: { name: 'ARangePicker' } },\n                { field: 'date5', title: 'ATimePicker', width: 140, editRender: { name: 'ATimePicker' } },\n                { field: 'tree1', title: 'ATreeSelect', width: 140, editRender: { name: 'ATreeSelect', props: { treeData: [] } } },\n                { field: 'tree2', title: 'ATreeSelect（不建议放在单元格）', width: 300, editRender: { name: 'ATreeSelect', props: { treeData: [], treeCheckable: true } } },\n                { field: 'flag', title: 'ASwitch', width: 100, cellRender: { name: 'ASwitch' } },\n                { field: 'rate', title: 'ARate', width: 200, cellRender: { name: 'ARate' } }\n              ]\n            } as VxeGridProps)\n\n            const gridEvents: VxeGridListeners = {\n              checkboxAll () {\n                const $grid = xGrid.value\n                demo1.selectRecords = $grid.getCheckboxRecords()\n              },\n              checkboxChange () {\n                const $grid = xGrid.value\n                demo1.selectRecords = $grid.getCheckboxRecords()\n              }\n            }\n\n            const findSexList = () => {\n              const sexList = [\n                { label: '', value: '' },\n                { label: '男', value: '1' },\n                { label: '女', value: '0' }\n              ]\n              if (gridOptions.columns) {\n                const column5 = gridOptions.columns[5]\n                if (column5.editRender) {\n                  column5.editRender.options = sexList\n                }\n                const column6 = gridOptions.columns[6]\n                if (column6.editRender) {\n                  column6.editRender.options = sexList\n                }\n              }\n            }\n\n            const findRegionList = () => {\n              const regionList = [\n                {\n                  label: '北京',\n                  value: 1,\n                  children: [\n                    { value: 3, label: '东城区' },\n                    { value: 4, label: '西城区' }\n                  ]\n                },\n                {\n                  label: '上海',\n                  value: 21,\n                  children: [\n                    { value: 23, label: '黄浦区' },\n                    { value: 24, label: '卢湾区' }\n                  ]\n                },\n                {\n                  label: '广东',\n                  value: 42,\n                  children: [\n                    { value: 43, label: '广州市' },\n                    { value: 67, label: '深圳市' }\n                  ]\n                }\n              ]\n              if (gridOptions.columns) {\n                const column8 = gridOptions.columns[8]\n                if (column8.editRender && column8.editRender.props) {\n                  column8.editRender.props.options = regionList\n                }\n              }\n            }\n\n            const findSexGroupList = () => {\n              const sexGroupList = [\n                {\n                  label: '分组1',\n                  options: [\n                    { label: '男', value: '1' }\n                  ]\n                },\n                {\n                  label: '分组2',\n                  options: [\n                    { label: '女', value: '0' }\n                  ]\n                }\n              ]\n              if (gridOptions.columns) {\n                const column7 = gridOptions.columns[7]\n                if (column7.editRender) {\n                  column7.editRender.optionGroups = sexGroupList\n                }\n              }\n            }\n\n            const findTreeSelectList = () => {\n              const treeData = [\n                {\n                  title: 'Node1',\n                  value: '0-0',\n                  key: '0-0',\n                  children: [\n                    { title: 'Child Node1', value: '0-0-0', key: '0-0-0' }\n                  ]\n                }, {\n                  title: 'Node2',\n                  value: '0-1',\n                  key: '0-1',\n                  children: [\n                    { title: 'Child Node3', value: '0-1-0', key: '0-1-0', disabled: true },\n                    { title: 'Child Node4', value: '0-1-1', key: '0-1-1' },\n                    { title: 'Child Node5', value: '0-1-2', key: '0-1-2' }\n                  ]\n                }\n              ]\n              if (gridOptions.columns) {\n                const column14 = gridOptions.columns[14]\n                if (column14.editRender && column14.editRender.props) {\n                  column14.editRender.props.treeData = treeData\n                }\n                const column15 = gridOptions.columns[15]\n                if (column15.editRender && column15.editRender.props) {\n                  column15.editRender.props.treeData = treeData\n                }\n              }\n            }\n\n            const insertEvent = async () => {\n              const $grid = xGrid.value\n              const record = {\n                role: '',\n                age: 18,\n                sex1: [],\n                region: [],\n                flag: false,\n                rate: 2\n              }\n              const { row: newRow } = await $grid.insert(record)\n              $grid.setEditRow(newRow)\n            }\n\n            const saveEvent = () => {\n              const $grid = xGrid.value\n              const { insertRecords, removeRecords, updateRecords } = $grid.getRecordset()\n              if (insertRecords.length || removeRecords.length || updateRecords.length) {\n                Modal.success({\n                  content: `insertRecords=${insertRecords.length}; removeRecords=${removeRecords.length}; updateRecords=${updateRecords.length}`\n                })\n              } else {\n                Modal.warn({\n                  content: '数据未改动！'\n                })\n              }\n            }\n\n            findSexList()\n            findRegionList()\n            findSexGroupList()\n            findTreeSelectList()\n\n            gridOptions.loading = true\n            setTimeout(() => {\n              gridOptions.data = [\n                { id: 10001, name: 'Test1', nickname: 'T1', role: 'Develop', sex: '0', sex1: [], region: [], age: 28, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 5, flag: false, address: 'Shenzhen' },\n                { id: 10002, name: 'Test2', nickname: 'T2', role: 'Test', sex: '1', sex1: [], region: [], age: 22, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 2, flag: false, address: 'Guangzhou' },\n                { id: 10003, name: 'Test3', nickname: 'T3', role: 'PM', sex: '0', sex1: [], region: [], age: 32, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 3, flag: false, address: 'Shanghai' },\n                { id: 10004, name: 'Test4', nickname: 'T4', role: 'Designer', sex: '0', sex1: ['1', '0'], region: [], age: 23, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', color1: '', tree1: '', tree2: [], date7: '', rate: 3, flag: true, address: 'Shenzhen' },\n                { id: 10005, name: 'Test5', nickname: 'T5', role: 'Develop', sex: '0', sex1: ['1', '0'], region: [], age: 30, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', color1: '', tree1: '', tree2: [], date7: '', rate: 0, flag: true, address: 'Shanghai' },\n                { id: 10006, name: 'Test6', nickname: 'T6', role: 'Designer', sex: '0', sex1: [], region: [], age: 21, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 3, flag: false, address: 'Shenzhen' },\n                { id: 10007, name: 'Test7', nickname: 'T7', role: 'Test', sex: '1', sex1: ['1'], region: [], age: 29, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 0, flag: true, address: 'Guangzhou' },\n                { id: 10008, name: 'Test8', nickname: 'T8', role: 'Develop', sex: '1', sex1: [], region: [], age: 35, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 2, flag: false, address: 'Shenzhen' },\n                { id: 10009, name: 'Test9', nickname: 'T9', role: 'Test', sex: '1', sex1: ['0'], region: [], age: 24, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 3, flag: false, address: 'Shenzhen' },\n                { id: 100010, name: 'Test10', nickname: 'T10', role: 'Develop', sex: '1', sex1: [], region: [], age: 20, date: '', date1: '', date2: '', date3: '', date4: [], date5: '', date7: '', color1: '', tree1: '', tree2: [], rate: 4, flag: false, address: 'Guangzhou' }\n              ]\n              gridOptions.loading = false\n            }, 500)\n\n            return {\n              xGrid,\n              demo1,\n              gridOptions,\n              gridEvents,\n              insertEvent,\n              saveEvent\n            }\n          }\n        })\n        "]}}}),s=n("6b0d"),c=n.n(s);const p=c()(l,[["render",o]]);t["default"]=p}}]);